package main

import (
	"context"
	"fmt"
	"sync/atomic"

	go_geerpc "go_geerpc/dayscodec"
	"go_geerpc/dayscodec/registry"
	"go_geerpc/dayscodec/xclient"
	"net/http"

	"log"
	"net"
	"sync"
	"time"
)

var count int64 = 0

type Foo int

type Args struct{ Num1, Num2 int }

func (f Foo) Sum(args Args, reply *int) error {
	*reply = args.Num1 + args.Num2
	return nil
}

func (f Foo) Sleep(args Args, reply *int) error {
	time.Sleep(time.Second * time.Duration(args.Num1))
	*reply =  args.Num1 + args.Num2
	return nil
}

func startServer(registryAddr string, wg *sync.WaitGroup) {
	var foo Foo
	
	// pick a free port
	/* net.Dial:
	Dial 用于从客户端发起连接到服务器。当您想与另一个服务或服务器建立连接时，您会使用 Dial。
	net.Listen:
	Listen 用于在服务器端开始监听特定的地址和端口。当您希望您的程序作为服务器并等待客户端连接时，您会使用 Listen。 */
	l, _ := net.Listen("tcp", ":0")
	server := go_geerpc.NewServer()
	_ = server.Register(&foo)
	// l.Addr().String()        eg: [::]:59586
	registry.Heartbeat(registryAddr, "tcp@"+l.Addr().String(), 0)
	wg.Done()
	server.Accept(l)
}



func foo(xc *xclient.XClient, ctx context.Context, typ, serviceMethod string, args *Args) {
	var reply int
	var err error
	switch typ {
	case "call":
		err = xc.Call(ctx, serviceMethod, args, &reply)
	case "broadcast":
		err = xc.Broadcast(ctx, serviceMethod, args, &reply)
	}
	if err != nil {
		log.Printf("%s %s error: %v", typ, serviceMethod, err)
	} else {
		atomic.AddInt64(&count, 1)
		log.Printf("%s %s success: %d + %d = %d", typ, serviceMethod, args.Num1, args.Num2, reply)
	}
}

func call(register string) {
	d := xclient.NewGeeRegistryDiscovery(register, 0)
	xc := xclient.NewXClient(d, xclient.RandomSelect, nil)
	defer func() { _ = xc.Close() }()
	// send request & receive response
	var wg sync.WaitGroup
	for i := 0; i < 50; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			foo(xc, context.Background(), "call", "Foo.Sum", &Args{Num1: i, Num2: i * i})
		}(i)
	}
	wg.Wait()
}

func broadcast(registry string) {
	d := xclient.NewGeeRegistryDiscovery(registry, 0)
	xc := xclient.NewXClient(d, xclient.RandomSelect, nil)
	defer func() { _ = xc.Close() }()
	var wg sync.WaitGroup
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			foo(xc, context.Background(), "broadcast", "Foo.Sum", &Args{Num1: i, Num2: i * i})
			// expect 2 - 5 timeout
			ctx, _ := context.WithTimeout(context.Background(), time.Second*2)
			foo(xc, ctx, "broadcast", "Foo.Sleep", &Args{Num1: i, Num2: i * i})
		}(i)
	}
	wg.Wait()
}

// 初始化注册中心
func startRegistry(wg *sync.WaitGroup) {
	l, _ := net.Listen("tcp", ":9999")
	registry.HandleHTTP()
	wg.Done()
	// 启动一个 HTTP 服务器来监听和处理传入的请求，使用默认的多路分配器，并且忽略任何可能返回的错误。
	_ = http.Serve(l, nil)
}


func main() {
	// SetFlags 方法用于设置日志的输出前缀。这个前缀由一些标志组成，这些标志定义了在每条日志消息前面应该显示哪些元素
	// 使用 log.SetFlags(0) 时，您实际上是清除了所有的标志，这意味着日志消息前面不会有任何前缀。
	log.SetFlags(0)
	registryAddr := "http://localhost:9999/_go_geerpc_/registry"
	var wg sync.WaitGroup
	wg.Add(1)
	go startRegistry(&wg)
	wg.Wait()


	time.Sleep(time.Second)
	wg.Add(2)
	go startServer(registryAddr, &wg)
	go startServer(registryAddr, &wg)
	wg.Wait()

	time.Sleep(time.Second)
	call(registryAddr)
	fmt.Println(count)
	//broadcast(registryAddr)
}